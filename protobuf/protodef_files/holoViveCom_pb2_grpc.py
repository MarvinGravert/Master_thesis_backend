# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import holoViveCom_pb2 as holoViveCom__pb2


class BackendStub(object):
    """package unary;

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LighthouseReport = channel.stream_unary(
                '/Backend/LighthouseReport',
                request_serializer=holoViveCom__pb2.LighthouseState.SerializeToString,
                response_deserializer=holoViveCom__pb2.Status.FromString,
                )
        self.ProvideTrackerInfo = channel.unary_unary(
                '/Backend/ProvideTrackerInfo',
                request_serializer=holoViveCom__pb2.Status.SerializeToString,
                response_deserializer=holoViveCom__pb2.TrackerState.FromString,
                )
        self.UpdateCalibrationInfo = channel.unary_unary(
                '/Backend/UpdateCalibrationInfo',
                request_serializer=holoViveCom__pb2.CalibrationInfo.SerializeToString,
                response_deserializer=holoViveCom__pb2.Status.FromString,
                )


class BackendServicer(object):
    """package unary;

    """

    def LighthouseReport(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProvideTrackerInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCalibrationInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LighthouseReport': grpc.stream_unary_rpc_method_handler(
                    servicer.LighthouseReport,
                    request_deserializer=holoViveCom__pb2.LighthouseState.FromString,
                    response_serializer=holoViveCom__pb2.Status.SerializeToString,
            ),
            'ProvideTrackerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ProvideTrackerInfo,
                    request_deserializer=holoViveCom__pb2.Status.FromString,
                    response_serializer=holoViveCom__pb2.TrackerState.SerializeToString,
            ),
            'UpdateCalibrationInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCalibrationInfo,
                    request_deserializer=holoViveCom__pb2.CalibrationInfo.FromString,
                    response_serializer=holoViveCom__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Backend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Backend(object):
    """package unary;

    """

    @staticmethod
    def LighthouseReport(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Backend/LighthouseReport',
            holoViveCom__pb2.LighthouseState.SerializeToString,
            holoViveCom__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProvideTrackerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Backend/ProvideTrackerInfo',
            holoViveCom__pb2.Status.SerializeToString,
            holoViveCom__pb2.TrackerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCalibrationInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Backend/UpdateCalibrationInfo',
            holoViveCom__pb2.CalibrationInfo.SerializeToString,
            holoViveCom__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
